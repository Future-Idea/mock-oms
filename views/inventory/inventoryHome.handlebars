{{>_inventoryNavbar}}
<h2>Welcome to Mock IMS</h2>
<h2>Inventory</h2>

<div style="margin: 0px 0px 20px 0px;">
  <button id="downloadCSV">Generate Inventory File</button>
</div>

<table Class="tableClass">
  <thead>
    <tr>
      <th>locationId</th>
      <th>sku</th>
      <th>quantity</th>
    </tr>
  </thead>
  <tbody>
    {{#each inventory}}
    <tr class="dataRow">
      <td>{{locationId}}</td>
      <td>{{sku}}</td>
      <td>{{quantity}}</td>
      <td class="btn"><button onclick="updateInventory(this)">+</button></td>
    </tr>
    {{/each}}
  </tbody>
</table>



<script>
// Function to update the Inventory in the tabel
function updateInventory(button) {
        // Find the row containing the button
        const row = button.parentNode.parentNode;
        
        // Find the third column in the row (index 2)
        const cell = row.cells[2];
        
        // Get the current value and increment it by 10
        let value = parseInt(cell.textContent);
        value += 10;
        
        // Update the cell's content with the new value
        cell.textContent = value;
    }


  // Function to convert table to CSV and initiate download
  function downloadCSV() {
    // Get all table rows
    const headers = Array.from(document.querySelectorAll("table.tableClass th")).map(th => th.textContent);
    const allRows = Array.from(document.querySelectorAll('table.tableClass tbody tr'));
    // Exclude the button columns from each row
    const rows = Array.from(allRows).map(row => {
      const cells = row.querySelectorAll('td');
      const filteredCells = Array.from(cells).filter(cell => !cell.querySelector('button'));
      const newRow = document.createElement('tr');
      filteredCells.forEach(cell => {
        const newCell = document.createElement('td');
        newCell.textContent = cell.textContent;
        newRow.appendChild(newCell);
      });
      return newRow;
    });

    const csvContent = "data:text/csv;charset=utf-8," +
      [headers.join(",")].concat(rows.map(row => Array.from(row.children).map(td => td.textContent).join(","))).join("\n");

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "inventory.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  // Attach event listener to download button
  document.getElementById("downloadCSV").addEventListener("click", downloadCSV);
</script>